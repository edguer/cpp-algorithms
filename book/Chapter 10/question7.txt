As the machine that responds to a given query is taken at random, we must not rely simply on local machine cache. We could then replicate the cache acquired by one machine to the other 99 machines. This can me achieve by using a pub/sub pattern, in which the machines subscribe to changes in the cache to its peers: as soon as a machine runs the processSearch, it caches the results using the query as the key (using hash) and publishes that change in the cache. Each cache entry must have an assigned TTL, since we want the test results to get updated from time to time. For example, we can set a TTL of 1 minute, so the next request after 1 minute will have to go back to the search backend, get the updated results, update the cache and publish that change to other machines. There are a few ways to hold the cache, we could have it all in memory, in disk or in flash, dependending on the hardware resources we have. We could also hold a hybrid mode, such as using disk cache as the regular method and promoting some cache results to the memory, depending on the usage (example: if the same cache item has been request more than one time per second, take to RAM).